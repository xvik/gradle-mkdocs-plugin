{"config":{"lang":["en"],"separator":"[\\s\\-]+","pipeline":["stopWordFilter"]},"docs":[{"location":"","title":"Welcome to gradle-mkdocs-plugin","text":"<p>Mkdocs (python tool) documentation generation and publishing plugin</p> <p>Release notes - Migration notes - License</p>"},{"location":"#ideal-for-open-source-projects","title":"Ideal for open source projects","text":"<ul> <li>Easy start: initial docs source generation</li> <li>Markdown syntax (with handy extensions)</li> <li>Great look from material theme (used by default) with extra features:<ul> <li>Mobile friendly</li> <li>Embedded search</li> <li>Syntax highlighting</li> <li>Dark theme switcher</li> </ul> </li> <li>Easy documentation contribution (jump to source directly from doc)</li> <li>Multi-version documentation publishing to github pages<ul> <li>Support version aliases (latest, dev, etc)</li> <li>Support mkdocs-material version switcher without mike tool usage</li> </ul> </li> <li>Variables support</li> <li>Could work with direct python or docker. </li> <li>Could use requirements.txt file  </li> <li>Compatible with gradle configuration cache</li> </ul> <p>Common configurations (cheat sheet)</p>"},{"location":"#example-usages","title":"Example usages:","text":"<ul> <li>mkdocs-gradle-plugin (self)</li> <li>use-python-gradle-plugin (base plugin)</li> <li>dropwizard-guicey</li> <li>gradle-quality-plugin </li> </ul>"},{"location":"examples/","title":"Example configurations","text":"<p>Common configurations cheat-sheet.</p>"},{"location":"examples/#single-version","title":"Single version","text":"<pre><code>mkdocs.publish.docPath = ''\n</code></pre> <p>Documentation always published into root folder:</p> <pre><code>gh-pages root/\n    generated docs\n</code></pre> <p>Very specific option, suitable for some site, blog etc.  Project documentation requires multi-version publication so users could  always consult with old docs.</p>"},{"location":"examples/#simple-multi-version","title":"Simple multi-version","text":"<pre><code>mkdocs.publish {\n    docPath = '$version'  \n    rootRedirect = true\n}\n</code></pre> <p>Documentation published into sub-folder. Only this sub folder would be updated on publication - other folders remain untouched.</p> <p>Tip</p> <p>It's better to specify exact version in <code>docPath</code>, because usually documentation site being updated after release and with default <code>$version</code> you would publish snapshot version instead.</p> <pre><code>docPath = '1.0'  \n</code></pre> <p>Each publication would publish:</p> <pre><code>gh-pages root/\n    version/\n        generated docs\n    index.html\n    versions.json    \n</code></pre> <p>Root index.html required to redirect use to the latest version when it opens site root.</p> <p>To activate version switcher component add in mkdocs.yml:</p> <pre><code>extra:\n  version:\n    provider: mike\n</code></pre> <p>(component requires only versions.json file generated at site root)</p>"},{"location":"examples/#using-latest-alias","title":"Using latest alias","text":"<p>It is quite common for projects to allow user to put <code>latest</code> in doc url instead of exact version: this way user could put link in his own code/docs which would always lead to up-to-date page.</p> <pre><code>mkdocs.publish {\n    docPath = '1.0'  \n    rootRedirect = true\n    versionAliases = ['latest']\n}\n</code></pre> <p>Everything as before, but on publication new folder would appear:</p> <pre><code>gh-pages root/\n    version/\n        generated docs\n    latest/\n        generated docs    \n    index.html\n    versions.json    \n</code></pre>"},{"location":"examples/#root-redirect-to-alias","title":"Root redirect to alias","text":"<p>In the example above root is still redirecting to exact version. To redirect into <code>latest</code> alias: </p> <pre><code>mkdocs.publish {\n    docPath = '1.0'  \n    rootRedirect = true\n    rootRedirectTo = 'latest'\n    versionAliases = ['latest']\n}\n</code></pre> <p>And now site root will lead to <code>latest</code> directory. See plugin site as an example.</p>"},{"location":"examples/#reference-project-version-in-docs","title":"Reference project version in docs","text":"<p>It is a very common need to reference project version instead of changing it everywhere before each release. It is possible with variables support.</p> <p>In mkdocs.yml add plugins:</p> <pre><code>plugins:\n  - search\n  - markdownextradata\n</code></pre> <p>In build.gradle declare variables:</p> <pre><code>mkdocs {\n    extras = [\n            'version': \"${-&gt; project.version}\"\n    ]\n}\n</code></pre> <p>Now you can reference version as:</p> <pre><code>{{ gradle.version }}\n</code></pre> <p>But, as mentioned before, it is more common to put raw version instead of relying on project version (because release docs could be updated after release):</p> <pre><code>mkdocs {\n    publish.docPath = '1.0'\n    extras = [\n            'version': '1.0'\n    ]\n}\n</code></pre> <p>Or, to avoid duplication:</p> <pre><code>mkdocs {\n    extras = [\n            'version': '1.0'\n    ]\n    publish.docPath = mkdocs.extras['version']\n}\n</code></pre>"},{"location":"examples/#old-version-publish","title":"Old version publish","text":"<p>You can always change and re-publish any old documentation version: it works the same as with new version publication.</p> <p>EXCEPT:</p> <ul> <li>Remember to switch off root redirection with <code>mkdocs.publish.rootRedirect = false</code>:   otherwise root index.html would be overridden and site root would point to wrong docs version</li> <li>Remember to remove aliases (remove <code>mkdocs.publish.versionAliases</code>):   otherwise alias folders would be overridden (e.g. latest would contain old version)</li> <li>Use <code>mkdocsVersionsFile</code> task to validate old version correctness:   It would try to warn you if it can detect more recent versions override</li> </ul>"},{"location":"examples/#incremental-versions-update","title":"Incremental versions update","text":"<p>When plugin used only for documentation generation and publication task is not used, then versions.json file can be updated incrementally (by adding new version on each release):</p> <pre><code>mkdocs.publish {\n    docPath = '1.0'  \n    rootRedirect = true\n    rootRedirectTo = 'latest'\n    versionAliases = ['latest']\n    existingVersionsFile = 'https://xvik.github.io/gradle-mkdocs-plugin/versions.json'\n}\n</code></pre> <p>On <code>mkdocsBuild</code> it would load remote json (it might be local path) and add new version, so build dir would contain:</p> <pre><code>build/mkdocs/\n    /1.0/            - mkdocs site\n    /latest/         - alias (copy)\n    index.html       - redirect to 'latest'\n    versions.json    - updated remote versions file    \n</code></pre> <p>After that built folder might be simply uploaded, for example into some ftp with other versions (append).</p>"},{"location":"getting-started/","title":"Getting started","text":""},{"location":"getting-started/#installation","title":"Installation","text":"<pre><code>buildscript {\n    repositories {\n        mavenCentral()\n    }\n    dependencies {\n        classpath 'ru.vyarus:gradle-mkdocs-plugin:4.0.1'\n    }\n}\napply plugin: 'ru.vyarus.mkdocs'\n</code></pre> <p>OR </p> <pre><code>plugins {\n    id 'ru.vyarus.mkdocs' version '4.0.1'\n}\n</code></pre> <p>Note</p> <p>There is also a lightweight plugin version <code>ru.vyarus.mkdocs-build</code> without git publication (see below).</p>"},{"location":"getting-started/#python","title":"Python","text":"<p>Important</p> <p>Plugin based on python plugin which implements all python-related staff like virtualenv creation, pip modules installation and python commands execution.  Mkdocs plugin just provides mkdocs-specific tasks above it. For all python-related configuration see python plugin documentation</p> <p>It was an initial goal to write two plugins instead of one in order to be able to easilly create plugins for other python modules (if required).</p> <p>Requires installed python 3.8 and above with pip.</p> <p>Check and install python if required.</p> <p>Note</p> <p>Plugin will not affect global python: it will create project-specific virtualenv (in <code>.gradle/python</code>)  and install all required (pip) modules there. This will grant build reproduction (once initialized virtualenv used for all  future executions). </p> <p>Tip</p> <p>It is completely normal to manually remove virtualenv folder (<code>.gradle/python</code>) in case of problems to re-create environment. There is also a <code>cleanPython</code> task for this.</p>"},{"location":"getting-started/#docker","title":"Docker","text":"<p>If you have docker installed, you can use python from docker container:</p> <pre><code>python.docker.use = true\n</code></pre> <p>In this case global python installation is not required.</p> <p>Tip</p> <p>To learn how docker used read python plugin documentation</p>"},{"location":"getting-started/#usage","title":"Usage","text":"<p>By default, documentation source assumed to be in <code>src/doc</code>.</p> <p>Tip</p> <p>Default location could be changed: <code>mkdocs.sourcesDir = 'docs'</code> </p> <p>Call <code>mkdocsInit</code> task to generate initial site version (into <code>src/doc</code> by default):</p> <pre><code>src/doc/\n    docs/               - documentation source\n        ...\n        index.md\n    mkdocs.yml          - site configuration\n</code></pre> <p>Note</p> <p>Plugin does not use mkdocs new command for site generation: custom template used  with pre-configured plugins and enabled material theme.</p> <p>Call <code>mkdocsServe</code> task to start live reload server to see default site: http://127.0.0.1:8000/.</p> <p>Tip</p> <p>Used port may be changed: <code>mkdocs.devPort = 4000</code>. Note that this setting overrides dev_addr in mkdocs.yml! </p> <p>Warning</p> <p>Python process may not be killed after you stop gradle execution (search and kill python process manually). This is a known gradle problem  and the only known workaround is to start task without daemon: <code>gradlew mkdocsServe --no-daemon</code>.  Another alternative is to start serve command directly: copy console command from task execution log and use it directly.</p> <p>When docker used, container should be properly shut down, but not immediately (about 10s).</p>"},{"location":"getting-started/#initial-site-configuration","title":"Initial site configuration","text":"<p>Open generated mkdocs config file <code>src/doc/mkdocs.yml</code>. It contains many commented options:</p> Commented option Recommendation site_author fill with you name or remove (appear in meta tags only) site_url Set to documentation root url (gh-pages url). Used as meta tag, as a link on the home icon and inside generated sitemap.xml. NOTE plugin will automatically modify url to point to correct published folder (when multi-version publication used). Repository link on each page (right top corner) repo_name Source repository link text (by default set to project name) repo_url Repository url (Github or Bitbucket) edit_uri Path to documentation source in the source repository (required for \"edit page\" (pencil icon) link) Copyright copyright Shown below each page <p>For material theme configuration see: configuration docs.</p> <p>Read about navigation configuration to fine tune navigation menus behavior (in <code>theme.features</code> section).</p> <p>Note</p> <p>Material theme supports docs version selector natively, but requires mike tool. Gradle plugin provides its own publishing implementation (not requiring mike) with exactly the same features (but easier to configure from gradle). So if you want version switcher, just enable it as shown in docs and it will work.</p> <p>Another commonly used feature is dark theme toggle</p>"},{"location":"getting-started/#writing","title":"Writing","text":"<p>Yaml configuration <code>nav</code> section declares your documentation structure. Pages inside <code>docs</code> folder may be structured as you want.</p> <p>To add new page simply add new markdown file (page.md) and add reference to it in <code>nav</code> config section.   </p> <p>Note</p> <p>All changes are immediately appeared in the started live reload server (<code>mkdocsServe</code>)</p> <p>You can use gradle-driven variables, for example, to insert project version in docs.</p> <p>Read:</p> <ul> <li>Mkdocs getting started guide.</li> <li>Mkdocs-material extensions. Mkdocs config   generated by <code>mkdocsInit</code> task already enables all extensions according to recommended configuration.   But you still need to know how to use them, so read this section.</li> </ul> <p>Tip</p> <p>If you want to use a different theme (not material) then you'll need to configure it</p>"},{"location":"getting-started/#building","title":"Building","text":"<p>Warning</p> <p>You will need to stop livereload server in order to build</p> <p>By default, <code>mkdocsBuild</code> task will generate (suppose project version is '1.0-SNAPSHOT'):</p> <pre><code>build/mkdocs/\n    /1.0-SNAPSHOT/    - mkdocs site\n    index.html        - redirect to correct site    \n</code></pre> <p>Note</p> <p>Also, versions.json file generated during publication (for version switcher) </p> <p>Plugin is configured for multi-version documentation publishing: each version is in it's own folder and special <code>index.html</code> at the root will redirect to the latest version (when published).</p> <p>Everything in <code>build/mkdocs/</code> is assumed to be published into github pages (preserving all other already published folders).  </p> <p>Default configuration:</p> <pre><code>mkdocs.publish {\n    docPath = '$version'  \n    rootRedirect = true  \n}\n</code></pre> <p>As documentation is often updated for already released version, it makes sense to define  current version manually (or define it when you need to publish to exact version):</p> <pre><code>mkdocs.publish.docPath = '1.0'\n</code></pre> <p>Tip</p> <p>See multi-version section for how to publish older docs version</p> <p>Tip</p> <p>You can also use version aliases like latest or dev or 1.x and perform root redirection to alias instead of exact version (common case, show 'latest')</p> <p>See examples section with most common configurations.</p>"},{"location":"getting-started/#single-version-site","title":"Single version site","text":"<p>If you don't want to use multi-version support at all then:</p> <pre><code>mkdocs.publish.docPath = ''  // or null \n</code></pre> <p>This way, mkdocs site will always be published at the root (in case of publish it will always replace  previous site version).</p>"},{"location":"getting-started/#publication","title":"Publication","text":"<p>When documentation site will be ready, you will need to call <code>mkdocksPublish</code> in order to  publish it to github pages (default).</p> <p>If your repo is <code>https://github.com/me/my-project</code> then documentation will be available as <code>https://me.github.io/my-project/</code>. </p> <p>Published index.html at the root will immediately redirect you to the actual version: <code>https://me.github.io/my-project/1.0.0/</code>.</p> <p>See more about publication customization in publication section. It also describes how to publish additional parts with documentation site (like javadoc).</p>"},{"location":"getting-started/#custom-publication","title":"Custom publication","text":"<p>If you don't plan to use publication into git then there is a lightweight plugin  version without publication tasks: </p> <pre><code>plugins {\n    id 'ru.vyarus.mkdocs-build' version '4.0.1'\n}\n</code></pre> <p>Full <code>ru.vyarus.mkdocs</code> plugin actually enables <code>ru.vyarus.mkdocs-build</code> plus configures publication tasks. So plugins are completely equal in functionality except publication.</p> <p>Note</p> <p>Root redirection (index.html) and aliases are all generated with <code>mkdocsBuild</code> task, so you will not lose these features. </p> <p>But versions.json file is generated only during publication (required for version switcher,  generated by analyzing existing folders in git branch)</p>"},{"location":"getting-started/#incremental-versions","title":"Incremental versions","text":"<p>Plugin provides two mechanisms for managing versions.json file (required for version switcher in documentation).</p> <p>By default, during publication (<code>mkdocsPublish</code> task) plugin will generate versions.json based on folders in the target git branch. This is the safest option as it will detect all removed documentation versions and update versions file accordingly.</p> <p>But, if you don't use git publication, you can enable \"incremental versions\": on build plugin would simply add new version to the existing versions file. To enable this just specify  current versions file:</p> <pre><code>mkdocs.publish.existingVersionsFile = 'path/to/actual/versions.json'\n</code></pre> <p>Or use an url to existing documentation site: </p> <pre><code>mkdocs.publish.existingVersionsFile = 'https://xvik.github.io/gradle-mkdocs-plugin/versions.json'\n</code></pre> <p>Note</p> <p>This mechanism will create new file each time it can't find configured file (in order to support first publication case). Please pay attention to logs.</p>"},{"location":"getting-started/#pip","title":"Pip","text":"<p>See pip section if you need to change mkdocs version, use custom theme or plugin.</p>"},{"location":"about/compatibility/","title":"Gradle compatibility","text":"<p>Plugin compiled for java 8, compatible with java 11. Works on windows and linux (and macos).</p> Gradle Version 7.0 4.0.1 5.3 3.0.0 5-5.2 2.3.0 4.x 1.1.0"},{"location":"about/history/","title":"Release notes","text":""},{"location":"about/history/#401-2024-04-15","title":"4.0.1 (2024-04-15)","text":"<ul> <li>Fix non-strict build (#88)</li> <li>Fix emoji plugin in default mkdocs.yml (emoji support moved from material extensions to mkdocs directly)</li> </ul>"},{"location":"about/history/#400-2024-04-14","title":"4.0.0 (2024-04-14)","text":"<ul> <li>(breaking) Drop gradle 5 and 6 support</li> <li>All tasks properties replaced with lazy properties</li> <li>Remove git-publish plugin. Plugin functions added directly with required modifications   so usage will be the same (compatible). The Author of the original plugin deprecated it   (together with grgit). Still, grgit will be used for now (because of its feature completeness)</li> <li>Authorization properties support remains for backwards compatibility, but auth could     be specified now directly in gitPublish.username (and password).</li> <li>Configuration cache compatibility</li> <li>Update packages:</li> <li>mkdocs 1.4.1 -&gt; 1.5.3</li> <li>mkdocs-material 8.5.7 -&gt; 9.5.17</li> <li>pygments 2.13.0 -&gt; 2.17.2</li> <li>pymdown-extensions 9.7 -&gt; 10.7.1</li> <li>Support hiding versions in versions file:</li> <li>mkdocs.publish.hideVersions - set versions to hide</li> <li>mkdocs.publish.hideOldBugfixVersions - automatically hide bugfix versions (disabled by default)</li> </ul>"},{"location":"about/history/#300-2022-11-01","title":"3.0.0 (2022-11-01)","text":"<ul> <li>(breaking) Drop gradle 5.0-5.2 support (minimum required gradle is 5.3)</li> <li>Python plugin related changes:</li> <li>Add docker support (with raw python container by default)</li> <li>Add python requirements.txt file support</li> <li>Add cleanPython task to easily cleanup local environment</li> <li>Dev server port number is now configurable: devPort property   (this required for proper docker support when non-local ip must be specified)</li> <li>mkdocs.resolveDocPath() never return null:   for single version docs '.' is returned now instead of null (#41)</li> <li>Update packages:</li> <li>mkdocs 1.3.0 -&gt; 1.4.1</li> <li>mkdocs-material 8.3.6 -&gt; 8.5.7</li> <li>pygments 2.12.0 -&gt; 2.13.0</li> <li>pymdown-extensions 9.4 -&gt;  9.7</li> <li>Ignore all git errors during plugin initialization (git used to resolve repoUrl on initialization) (#45)</li> <li>Split plugin into 2 plugins to let users use plugin without custom publication implementation:</li> <li>mkdocs-build - everything without publication (and no grgit plugin activation)</li> <li>mkdocs - same as before (registers mkdocs-build plugin and configures publication tasks)</li> <li>mkdocsBuild task could now update existing versions file (even download from URL) (#31)</li> <li>To enable specify existing versions file location: mkdocs.publish.existingVersionsFile = '...'</li> <li>When target file not found new (empty) one would be created</li> <li>Ideal for incremental publishing when each publication just adds a new version to existing file     (when git publication is not used)</li> </ul>"},{"location":"about/history/#240-2022-06-17","title":"2.4.0 (2022-06-17)","text":"<ul> <li>Fix variables support for gradle 7.4 (#34)</li> <li>Update packages:</li> <li>mkdocs-material 8.2.8 -&gt; 8.3.6 (drops python 3.6 support)</li> <li>pygments 2.11.2 -&gt; 2.12.0</li> <li>pymdown-extensions 9.1 -&gt;  9.4</li> </ul>"},{"location":"about/history/#230-2022-04-02","title":"2.3.0 (2022-04-02)","text":"<ul> <li>Update packages:</li> <li>mkdocs 1.2.3 -&gt; 1.3.0 (fixes #29: jinja2 3.1.0 support)</li> <li>mkdocs-material 8.0.2 -&gt; 8.2.8</li> <li>pygments 2.10.0 -&gt; 2.11.2</li> <li>mkdocs-markdownextradata-plugin 0.2.4 -&gt; 0.2.5</li> </ul>"},{"location":"about/history/#220-2021-12-08","title":"2.2.0 (2021-12-08)","text":"<ul> <li>Update packages:</li> <li>mkdocs 1.1.2 -&gt; 1.2.3     See breaking changes:<ul> <li>site_url is now required</li> <li>google_analytics option deprecated - theme specific configurations used instead (see below)</li> </ul> </li> <li>mkdocs-material 7.0.6 -&gt; 8.0.2     Migration notes:<ul> <li>instead of google_analytics extra.analytics must be used</li> <li>replace codehilite extension with pymdownx.highlight</li> <li>to activate light/dark theme toggle (#12)     </li> </ul> </li> <li>pygments 2.8.0 -&gt; 2.10.0</li> <li>pymdown-extensions 8.1.1 -&gt; 9.1</li> <li>Update mkdocs.yaml generated by init task with most useful options commented</li> <li>Add support for version switcher (without mike tool usage), by generating versions.json from publish repository folders (#10)</li> <li>New option <code>mkdocs.publish.generateVersionsFile</code> could disable versions.json file generation</li> <li>File generated by new mkdocsVersionsFile task which may be used instead of mkdocsBuild to test switcher</li> <li>Add aliases support (same way as in mike), declared with new option <code>mkdocs.publish.versionAliases</code></li> <li>Add <code>mkdocs.publish.rootRedirectTo</code> option to be able to configure root redirection into alias</li> </ul>"},{"location":"about/history/#212-2021-12-01","title":"2.1.2 (2021-12-01)","text":"<ul> <li>Fix java 8 support, dropped due to jgit 6 transitive dependency (#13)</li> </ul>"},{"location":"about/history/#211-2021-03-18","title":"2.1.1 (2021-03-18)","text":"<ul> <li>Fix variables support ignore 'docs_dir' configuration from mkdocs.yml (#8)</li> </ul>"},{"location":"about/history/#210-2021-03-17","title":"2.1.0 (2021-03-17)","text":"<ul> <li>Support python installed from Windows Store (use-python-plugin 2.3.0)</li> <li>Update packages:<ul> <li>mkdocs 1.1 -&gt; 1.1.2</li> <li>mkdocs-material 4.6.3 -&gt; 7.0.6</li> <li>pygments 2.6.1 -&gt; 2.8.0</li> <li>pymdown-extensions 6.3.0 -&gt; 8.1.1</li> </ul> </li> <li>Optional variables support for all mkdocs tasks: there is no (and not planned) native support for   variables in mkdocs, but often it is very handful. It is only possible to have it with a plugin. (#7)<ul> <li>Added mkdocs-markdownextradata-plugin 0.2.4 as installed module (no harm, you must active it manually!)</li> <li>Added mkdocs.extras configuration option: map to declare additional variables</li> <li>When extra variables declared, plugin would generate a special file, containing all declared variables,   which markdownextradata plugin would recognize and use automatically.</li> <li>Variables must be used with 'gradle' prefix:  {{ gradle.declared_var_name }} </li> </ul> </li> </ul> <p>WARNING: there were some scheme changes in mkdocs-material. Most likely you may face social links change:</p> <p>Before: social: - type: github link: https://github.com/xvik</p> <p>After: social: - icon: fontawesome/brands/github link: https://github.com/xvik</p> <p>See mkdocs-material upgrade guide for details</p>"},{"location":"about/history/#201-2020-04-06","title":"2.0.1 (2020-04-06)","text":"<ul> <li>Fix relative virtualenv paths support (don't rely on gradle work dir) (#5)</li> </ul>"},{"location":"about/history/#200-2020-03-13","title":"2.0.0 (2020-03-13)","text":"<ul> <li>(breaking) Drop java 7 support</li> <li>(breaking) Drop gradle 4 support</li> <li>Fix jgit dependency conflict (#4) (plugin now use jgit 5)</li> <li>Update packages:<ul> <li>mkdocs 1.0.4 -&gt; 1.1</li> <li>mkdocs-material 3.0.4 -&gt; 4.6.3</li> <li>pygments 2.2.0 -&gt; 2.6.1</li> <li>pymdown-extensions 6.0.0 -&gt; 6.3.0</li> </ul> </li> <li>Use gradle tasks configuration avoidance for lazy tasks initialization (no init when tasks not needed)    </li> </ul>"},{"location":"about/history/#110-2018-10-14","title":"1.1.0 (2018-10-14)","text":"<ul> <li>Default template's mkdocs.yml changes:<ul> <li>fixed <code>edit_uri</code> (missed \"/docs\" ending)</li> <li><code>pages</code> changed to <code>nav</code></li> <li>change parameters syntax in <code>markdown_extensions</code> section </li> </ul> </li> <li>Fix documentation in sub module support (use-python plugin 1.2.0)</li> <li>Support Mkdocks 1.0:<ul> <li>Update default mkdocs 0.17.3 -&gt; 1.0.4</li> <li>Update default mkdocs-material 2.7.2 -&gt; 3.0.4</li> <li>Update default pymdown-extensions 4.9.2 -&gt; 6.0.0</li> </ul> </li> </ul> <p>Mkdocs 1.0 migration notes (for existing docs):</p> <ul> <li>Rename <code>pages</code> section into <code>nav</code> </li> <li>Make sure <code>site_url</code> set correctly (otherwise sitemap will contain None instead of urls)</li> <li>Change <code>markdown_extensions</code> section from using <code>something(arg=val)</code> syntax into:</li> </ul> <pre><code>markdown_extensions:\n  - admonition\n  - codehilite:\n      guess_lang: false\n  - footnotes\n  - meta\n  - toc:\n      permalink: true\n  - pymdownx.betterem:\n      smart_enable: all\n  - pymdownx.caret\n  - pymdownx.inlinehilite\n  - pymdownx.magiclink\n  - pymdownx.smartsymbols\n  - pymdownx.superfences\n</code></pre>"},{"location":"about/history/#101-2018-04-23","title":"1.0.1 (2018-04-23)","text":"<ul> <li>Fix pip 10 compatibility (use-python plugin 1.0.2)</li> <li>Update default mkdocs 0.17.2 -&gt; 0.17.3</li> <li>Update default mkdocs-material 2.2.1 -&gt; 2.7.2</li> <li>Update default pymdown-extensions 4.6 -&gt; 4.9.2</li> </ul>"},{"location":"about/history/#100-2017-12-30","title":"1.0.0 (2017-12-30)","text":"<ul> <li>Initial release</li> </ul>"},{"location":"about/license/","title":"License","text":"<p>The MIT License (MIT)</p> <p>Copyright \u00a9 2017-2024, Vyacheslav Rusakov</p> <p>Permission is hereby granted, free of charge, to any person obtaining a copy of this software and associated documentation files (the \"Software\"), to deal in the Software without restriction, including without limitation the rights to use, copy, modify, merge, publish, distribute, sublicense, and/or sell copies of the Software, and to permit persons to whom the Software is furnished to do so, subject to the following conditions:</p> <p>The above copyright notice and this permission notice shall be included in all copies or substantial portions of the Software.</p> <p>THE SOFTWARE IS PROVIDED \"AS IS\", WITHOUT WARRANTY OF ANY KIND, EXPRESS OR IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF MERCHANTABILITY, FITNESS FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT. IN NO EVENT SHALL THE AUTHORS OR COPYRIGHT HOLDERS BE LIABLE FOR ANY CLAIM, DAMAGES OR OTHER LIABILITY, WHETHER IN AN ACTION OF CONTRACT, TORT OR OTHERWISE, ARISING FROM, OUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE USE OR OTHER DEALINGS IN THE SOFTWARE.</p>"},{"location":"about/migration/","title":"Migration notes","text":"<p>Summary</p> <p>This section mostly describes main changes in updated mkdocs and material versions, assuming you'll use default versions (provided by plugin).</p>"},{"location":"about/migration/#400","title":"4.0.0","text":"<p>Gradle 5-6 not supported anymore.</p> <p>material-mkdocs-extensions module was deprecated because emoji support was added directly into mkdocs. So, you need to change in your mkdocs.yml this:</p> <pre><code>  - pymdownx.emoji:\n      emoji_index: !!python/name:materialx.emoji.twemoji\n      emoji_generator: !!python/name:materialx.emoji.to_svg\n</code></pre> <p>into this:</p> <pre><code>  - pymdownx.emoji:\n      emoji_index: !!python/name:material.extensions.emoji.twemoji\n      emoji_generator: !!python/name:material.extensions.emoji.to_svg\n</code></pre>"},{"location":"about/migration/#300","title":"3.0.0","text":"<p>Gradle 5.0-5.2 is not supported anymore.</p> <p>Use python 3.8 and above: there might be problem with <code>importlib-metadata 5.0</code> package installed by version range (transitive dependency) and incompatible with python &lt; 3.8</p> <p>Plugin can use docker now instead of local python: <code>mkdocs.docker.use = true</code></p> <p>New configuration <code>mkdocs.devPort</code> overrides <code>dev_addr</code> configuration in your mkdocs.yml (this was required for proper docker support). If you need to change default port (3000), use gradle config to change it</p> <p>If you don't need git publication tasks, you can now use lightweight plugin version: <pre><code>id 'ru.vyarus.mkdocs-build' version '3.0.0'\n</code></pre></p> <p>There is also a way now to update existing versions.json file in case when git publication not used: configure current file location with <code>mkdocs.publish.existingVersionsFile = 'https://xvik.github.io/gradle-mkdocs-plugin/versions.json'</code> (or local path) and <code>mkdocsBuild</code> would generate updated versions.json inside mkdocs build dir. </p>"},{"location":"about/migration/#240","title":"2.4.0","text":"<p>Python 3.6 is not supported anymore, use python 3.7 - 3.10.</p>"},{"location":"about/migration/#230","title":"2.3.0","text":"<p>There is no breaking changes since 2.2.0, but if you're migrating from earlier version please see 2.2.0 migration notes.</p>"},{"location":"guide/configuration/","title":"Configuration","text":"<p>Important</p> <p>Plugin based on python plugin which manage all  python-related staff like virtualenv creation, pip installation and python executions. For python-related configurations refer to python plugin documentation </p> <p>Tip</p> <p>For docker configuration see python plugin documentation </p> <p>Important</p> <p>There are two plugin versions:</p> <ul> <li><code>ru.vyarus.mkdocs</code> - full plugin</li> <li><code>ru.vyarus.mkdocs-build</code> - without publication tasks (lightweight)</li> </ul> <p>Both versions are equal in functionality, except publication stage.</p> <p>Configuration properties with default values:</p> <pre><code>mkdocs {\n    // mkdocs sources\n    sourcesDir = 'src/doc'    \n    // strict build (fail on build errors)\n    strict = true    \n    // target build directory (publication root)\n    buildDir = 'build/mkdocs'\n    // automatically update site_url in mkdocs.yml before mkdocsBuild\n    updateSiteUrl = true\n    // optional variables declaration (to bypass gradle data to docs)\n    extras = [:]\n    // dev server port (mkdocsServe task), overrides dev_addr from mkdocs.yml\n    devPort = 3000\n\n    publish {\n        // publication sub-folder (by default project version)\n        docPath = '$version'\n        // generate versions.json file for versions switcher\n        // [used by publication task]\n        generateVersionsFile = true\n        // specify path to or URL to existing versions.json file in order to update it (add new version); \n        // executed by mkdocsBuild, suitable when git publication not used\n        existingVersionsFile\n        // custom version name shown in version switcher (by default version folder name)\n        versionTitle = '$docPath'\n        // one or more alias folders to copy generated docs to (e.g. 'latest' or 'dev')\n        versionAliases = []\n        // specify versions to hide in version switcher without removing actual version folders\n        hideVersions = []\n        // when enabled it would automatically detect old bugfix versions and hide them \n        // (because documentation for bugfix versions usually the same)\n        // e.g. for versions 1.1.0, 1.1.1, 1.2.0, 1.2.0.1, 1.2.0.2 \n        // it would hide 1.1.0 and 1.2.0.1 \n        hideOldBugfixVersions = false\n        // generate index.html' for root redirection to the last published version \n        rootRedirect = true\n        // allows changing root redirection to alias folder instead of exact version \n        rootRedirectTo = '$docPath'\n        // publish repository uri (bu default the same as current repository)\n        // [used by publication task]\n        repoUri = null\n        // publication branch\n        // [used by publication task]\n        branch = 'gh-pages'\n        // publication comment\n        // [used by publication task]\n        comment = 'Publish $docPath documentation'\n        // directory publication repository checkout, update and push\n        // [used by publication task]\n        repoDir = '.gradle/gh-pages'\n    }\n}\n</code></pre> <p>Tip</p> <p>Options marked as <code>[used by publication task]</code> used ONLY during publication and so would be ignored when build-only plugin version (<code>ru.vyarus.mkdocs-build</code>) used.</p> <p>Not marked publication propeties used by <code>mkdocsBuild</code></p> <p>By default:</p> <ul> <li>All documentation sources located in <code>src/doc</code> (and <code>mkdocsInit</code> task generate stubs there)</li> <li><code>mkdocsBuild</code> task will build site into <code>build/mkdocs</code></li> <li>Current project version is used as documentation folder (<code>build/mkdocs/$version</code>)</li> <li>Github repository is assumed by default, so publication will be performed into <code>gh-pages</code> branch (where github will automatically detect it)</li> <li>Variables plugin is not configured. See variables section for details.</li> </ul> <p>Note</p> <p>In order to include something else into published docks (e.g. javadoc) see publication.</p>"},{"location":"guide/configuration/#single-version-site","title":"Single version site","text":"<p>If you don't want to use multi-version support at all then:</p> <pre><code>mkdocs.publish.docPath = ''  // or null \n</code></pre> <p>This way, mkdocs site will always be published at the root (in case of publish it will always replace  previous site version).</p>"},{"location":"guide/configuration/#docs-as-module","title":"Docs as module","text":"<p>Example of moving documentation into separate gradle module: </p> <pre><code>plugins {\n    id 'ru.vyarus.mkdocs' version '4.0.1' apply false                                \n}\n\nversion = '1.0-SNAPSHOT'\n\nproject(':doc') {\n    apply plugin: 'ru.vyarus.mkdocs' \n\n    mkdocs {\n        sourcesDir = 'src'\n    }\n}\n</code></pre> <p>Default docs location simplified to simple <code>src</code> because of no other sources in this module.</p> <p>If we call <code>:doc:mkdocsInit</code> it will generate documentation stubs like this:</p> <p>Project structure:</p> <pre><code>/\n    /doc/\n        src/\n            docs/\n            ...\n            index.md\n        mkdocs.yml\nbuild.gradle\nsettings.gradle            \n</code></pre> <p>For simplicity, gradle configuration for <code>doc</code> module is declared in the main file, but it could be declared inside doc's own build.gradle.</p>"},{"location":"guide/multi-version/","title":"Multi-version documentation","text":"<p>By default, plugin assume multi-version documentation publishing. </p> <p>Configuration, responsible for versioning:</p> <pre><code>mkdocs.publish {\n    docPath = '$version'  \n    rootRedirect = true \n    rootRedirectTo = '$docPath'\n\n    versionTitle = '$docPath'\n    versionAliases = []\n    hideVersions = []\n    hideOldBugfixVersions = false\n    generateVersionsFile = true\n}\n</code></pre> <p>Tip</p> <p>Usually it is more handy to manually set current doc version and not rely on project version because  often documentation for currently released version is updated multiple times after release.</p> <p>Important</p> <p>Mkdocs-material suggests mike tool usage for publication. Gradle plugin implements absolutely the same workflow as mike, but much easier customizable (as gradle plugin). Material theme would still be able to show version switcher because plugin generates required versions.json file.</p>"},{"location":"guide/multi-version/#workflow","title":"Workflow","text":"<p>Usually you work on documentation for current version only. When new version released - you publish new documentation version and continue evolving it. Old version stays published for the legacy users.</p>"},{"location":"guide/multi-version/#older-version-update","title":"Older version update","text":"<p>When older documentation version needs to be updated switch off redirection <code>index.html</code> generation (so it would not override redirection to the latest version):</p> <pre><code>mkdocs.publish {\n    docPath = '0.9'  \n    rootRedirect = false  // site root must still redirect to '1.0' (assume it's already published)\n}\n</code></pre> <p>Will build (without root index.html):</p> <pre><code>build/mkdocs/\n    /0.9/    - mkdocs site for old version\n</code></pre> <p>Also, do not use <code>versionAliases</code> when publishing old version because it may override more recent docs version. Plugin would try to warn you in such cases:</p> <pre><code>WARNING: Publishing version '1.0' is older then the latest published '1.1' and the following overrides might not be desired: \n    root redirect override to '1.0'\n    existing alias 'latest' override\n    existing alias '1.x' override\n</code></pre> <p>Important</p> <p>This warning is produced by <code>mkdocsVersionsFile</code> file and only when versions.json file  generation is not disabled. This check can't be done under <code>mkdocsBuild</code> because publishing repository is required for validation.</p> <p>So please, when releasing an old version use <code>mkdocsVersionsFile</code> to see all possible warnings before actual publication.</p>"},{"location":"guide/multi-version/#publication-layouts","title":"Publication layouts","text":"<p>You may define whatever layout you want, e.g.:</p> <pre><code>mkdocs.publish.docPath = 'en/1.0/'  \n</code></pre> <p>Here generated site will be published into <code>/en/1.0/</code> folder (not just version) and  index.html generated at the root with correct redirection.</p> <p>Warning</p> <p>If you want to use version switcher then you should not use  long version paths, because mkdocs-material would look for versions file only at one level up. </p>"},{"location":"guide/multi-version/#aliases","title":"Aliases","text":"<p>It is possible to publish version not only into version folder, but also into aliased folders.</p> <p>Could be useful for:</p> <ul> <li>Publishing the latest documentation under <code>latest</code> alias, so users could always   reference the latest docs with the same link.</li> <li>Publishing docs for developing version under <code>dev</code> alias, so users could easily find dev docs.</li> <li>Serving the latest (patch) version for some mojor version: e.g. <code>5.x</code> alias could serve the latest   published bugfix.</li> </ul> <p>For example, to add <code>latest</code> alias:</p> <pre><code>mkdocs.publish {\n    docPath = '1.0'  \n    rootRedirect = true\n    versionAliases = ['latest']\n}\n</code></pre> <p>Will build:</p> <pre><code>build/mkdocs/\n    /0.9/    \n    /latest/\n    index.html\n</code></pre> <p>Note</p> <p>Alias folder contains a copy of generated documentation, which means that sitemap links would lead to path of exact version.</p> <p>If same version is re-published - aliases would be correctly updated too.</p> <p>It is also possible to redirect root into alias instead of exact version with <code>rootRedirectTo</code> option:</p> <pre><code>mkdocs.publish {\n    versionAliases = ['latest']\n    rootRedirectTo = 'latest'\n}\n</code></pre> <p>Tip</p> <p>In case of root redirection to alias it is better to enable version switcher to clearly show what version is active now (otherwise it would be not obvious)</p>"},{"location":"guide/multi-version/#doc-version-switcher","title":"Doc version switcher","text":"<p>Version switcher might be enabled in mkdocs.yml exactly as described in docs:</p> <pre><code>extra:\n  version:\n    provider: mike\n</code></pre> <p>Important</p> <p>You don't need mike itself! </p> <p>Important</p> <p>You will not see switcher under <code>mkdocsServe</code> command, but if you call <code>mkdocsVersionsFile</code> (which would also call <code>mkdocsBuild</code>), and manually open new version it would show switcher with all versions (using generated versions.json) </p> <p>Mkdocs-material requires only <code>versions.json</code> file stored at docs root. Plugin would automatically generate such file (following mike syntax):</p> <ul> <li>Plugin verifies actually existing directories in gh-pages repository and would   add them to generated versions file. So if you already have many versions published, just publish   new version with enabled versions support and you'll see all of them in the version switcher.</li> <li>Theme folders are detected by using <code>\\d+(\\..*)?</code> regexp (version folder must start with a number)   and it must contain 404.html file.</li> <li>Deeper versions folders are also supported: e.g. if <code>mkdocs.publish.docPath = 'en/1.0/'</code> then   `en/1.0' folder would be recognized as version</li> <li>Existing records in versions.json file are preserved for found version folders.<ul> <li>You can modify file manually (e.g. to modify version title) and it will not be overridden on next publication</li> <li>You can manually remove version folder in repository and on next publication versions.json would be corrected</li> </ul> </li> <li>If aliases used, they would be correctly updated (e.g. <code>latest</code> removed from previous latest version.)</li> </ul> <p>If you do not want to generate versions file:</p> <p><code>mkdocs.publish.generateVersionsFile = false</code></p> <p>To customize version title (shown in dropdown selection) use:</p> <p><code>mkdocs.publish.versionTitle = '1.0 (important fix)'</code></p>"},{"location":"guide/multi-version/#incremental-versions","title":"Incremental versions","text":"<p>There is an alternative way for versions.json file generation for cases when publishing task is not used (e.g. when lightweight <code>ru.vyarus.mkdocs-build</code> plugin used).</p> <p>The idea is to use existing versions file and add new version into it (in contrast, git based publication could detect removed version folders and remove versions from file accordingly).</p> <p>Tip</p> <p>Version aliases would be also correctly processed.</p> <p>To enable incremental versions generation, specify current versions file location:</p> <pre><code>mkdocs.publish.existingVersionsFile = 'path/to/actual/versions.json'\n</code></pre> <p>You can also use a URL (http, ftp or anything that URL could handle):</p> <pre><code>mkdocs.publish.existingVersionsFile = 'https://xvik.github.io/gradle-mkdocs-plugin/versions.json'\n</code></pre> <p>When file specified, <code>mkdocsBuild</code> would load current file and apply new version there (if required). Updated versions file would be available in target build directory (same as with git publication).</p> <p>Important</p> <p>There will not be an error if file not found or due to download error - instead plugin would consider current file as not existing and would create a fresh versions file.</p> <p>This is useful for the first publication.</p> <p>Note</p> <p>When git publication used, incremental versions file, generated by mkdocsBuild would be overridden by versions file, generated by publishing task. If required, it could be disabled with <code>mkdocs.publish.generateVersionsFile = false</code>, but keep in mind that  publication mechanism is safer to use.</p>"},{"location":"guide/multi-version/#hide-versions","title":"Hide versions","text":"<p>If you publish documentation for each released version, after some time you may notice too  many versions in the version selector. Often some versions become not relevant and could be hidden (it would not be correct to remove old version folder).</p> <p>For example, suppose we have: 1.0, 1.1.0, 1.1.1, 1.1.2, 1.1.3. It makes no sense to keep old bugfix versions in the version chooser:</p> <pre><code>mkdocs.publish.hideVersions = ['1.1.0', '1.1.1', '1.1.2']\n</code></pre> <p>Now version selector would show only '1.0' and '1.1.3' versions, but all hidden versions would still be accessible by direct link.</p> <p>Important</p> <p>Version hiding does not work for incremental versions  (where the current version is just appended into some existing versions file inside mkdocsBuild task). </p> <p>For bugfix versions (like in the example above) plugin could hide versions automatically:</p> <pre><code>mkdocs.publish.hideOldBugfixVersions = true\n</code></pre> <p>Note</p> <p>Automatic versions hiding does not try to be too smart: 1. It looks only versions with the same \"base\" part (same number of dots).      E.g. 2.0.0, 2.0.1 or 2.0.0.1, 2.0.0.2, but would not compare 2.0.0 and 2.0.0.1 2. Ignore versions not ending digit (like 1.0.2.final)</p> <p>All hidden versions could be seen in the logs. You can always execute <code>mkdocsVersionsFile</code> to verify versions file updates correctness before actual publication.</p>"},{"location":"guide/pip/","title":"Pip modules","text":"<p>Plugin will install by default the following pip modules:</p> <ul> <li>mkdocs:1.5.3</li> <li>mkdocs-material:9.5.17</li> <li>pygments:2.17.2</li> <li>pymdown-extensions:10.7.1</li> <li>mkdocs-markdownextradata-plugin:0.2.5</li> </ul> <p>By default, modules are installed into project specific virtualenv (located in <code>.gradle/python</code>).  You can see all installed modules with <code>pipList</code> task.</p> <p>If you want to use other python modules (e.g. other theme):</p> <pre><code>python.pip 'other-module:12', 'and-other:1.0'\n</code></pre> <p>Also, you can override default modules versions:</p> <pre><code>python.pip 'mkdocs:1.1'\n</code></pre> <p>And even downgrade:</p> <pre><code>python.pip 'mkdocs:1.0.3'\n</code></pre> <p>Tip</p> <p>All default modules are simply implicitly configured in <code>python.pip</code> and any  manual module declaration will override the default. Read more about possible pip modules configuration in  python plugin documentation </p> <p>Note</p> <p>You can also use requirements.txt file for version management. Read more in python plugin documentation</p> <p>You can use <code>pipUpdates</code> task to check if newer module versions are available.</p>"},{"location":"guide/publication/","title":"Publication","text":"<p>Note</p> <p>Plugin does not use mkdocs publication, because it does not support multi-versioning. Instead, custom git publication tasks used for publication (based on grgit).</p> <p>Note</p> <p>Mkdocs-material suggests mike tool usage for publication. Gradle plugin implements absolutely the same workflow as mike, but much easier customizable (as gradle plugin). Material theme would still be able to show version switcher because plugin generates required versions.json file.</p> <p>Tip</p> <p>There is a special lightweight plugin version without publication tasks (and git-publish plugin registration): <code>ru.vyarus.mkdocs-build</code>. Might be useful if you publish docs in a different way (e.g. with ftp). </p> <p>By default, no configuration is required. Only project itself must be published to git so that plugin could calculate default url  (or <code>mkdocs.publish.repoUrl</code> manually specified).</p> <p>On the first <code>mkdocsPublish</code> task call:</p> <ul> <li><code>gh-pages</code> branch will be created in the same repo</li> <li>built site pushed to gh-pages repository branch </li> </ul> <p>Later <code>mkdocsPublish</code> task calls will only remove current version folder (replace with the new one) or publish completely new version only.</p> <p>You can find actual <code>gh-pages</code> branch inside <code>.gradle/gh-pages</code> (this checkout is used for publishing).  Gradle folder is used to cache repository checkout because eventually it would contain many versions and there is no need to checkout all of them each time (folder could be changed with <code>mkdocs.publish.repoDir</code>).</p>"},{"location":"guide/publication/#authentication","title":"Authentication","text":"<p>By default, grgit will ask credentials with a popup (swing). Even if github pages are published on the same repo, the repo is checked out into different folder and so current repository credentials can't be used automatically.  </p> <p>You can specify credentials as:</p> <ul> <li>Environment variables: <code>GRGIT_USER</code> (could be github token), <code>GRGIT_PASS</code></li> <li>System properties: <code>org.ajoberstar.grgit.auth.username</code> (could be github token), <code>org.ajoberstar.grgit.auth.password</code></li> <li>Directly in <code>gitPublish.username</code> (could be github token) and  <code>gitPublish.password</code>    (which would be set as system properties from point 2)</li> </ul> <p>See details in grgit docs.</p> <p>Plugin will automatically bind gradle properties <code>org.ajoberstar.grgit.auth.*</code> to system properties (just before <code>gitPublishReset</code>). This allows you to define credentials as global gradle properties in <code>~/.gradle/gradle.properties</code>:</p> <pre><code>org.ajoberstar.grgit.auth.username=user\norg.ajoberstar.grgit.auth.password=pass\n</code></pre> <p>For testing, you can define properties inside gradle script:</p> <pre><code>ext['org.ajoberstar.grgit.auth.username'] = 'user'\next['org.ajoberstar.grgit.auth.password'] = 'pass'  \n</code></pre>"},{"location":"guide/publication/#publish-additional-resources","title":"Publish additional resources","text":"<p>If you want to publish not only generated site, but something else too then configure plugin to include additional content.</p> <p>Examples:</p> javadoc  Here is how you add javadoc: <pre><code>gitPublish.contents {\n    from(javadoc) {\n        // need to use resolveDocPath because by default it's a template \n        into \"${mkdocs.resolveDocPath()}/javadoc\"\n    }\n}\n\n// dependency will NOT be set automatically by copySpec above\ngitPublishReset.dependsOn javadoc\n</code></pre> dokka  Here is how you add dokka for a single module: <pre><code>gitPublish.contents {\n    from(dokkaHtml) {\n        // need to use resolveDocPath because by default it's a template \n        into \"${mkdocs.resolveDocPath()}/dokka\"\n    }\n}\n\n// dependency will NOT be set automatically by copySpec above\ngitPublishReset.dependsOn dokkaHtml\n</code></pre> dokkaMultiModule  Here is how you add dokka for multiple modules: <pre><code>gitPublish.contents {\n    // You cannot use use dokkaHtmlMultiModule directly like with javadoc or dokkaHtml\n    from(dokkaHtmlMultiModule.map(task -&gt; task.outputDirectory)) {\n        // need to use resolveDocPath because by default it's a template \n        into \"${mkdocs.resolveDocPath()}/dokka\"\n    }\n}\n\n// dependency will NOT be set automatically by copySpec above\ngitPublishReset.dependsOn dokkaHtmlMultiModule\n</code></pre> <p>To publish </p> <p>Note</p> <p>When multi-version publishing is not used (<code>mkdocs.publish.docPath</code> set to null)  <code>${mkdocs.resolveDocPath()}/</code> would be resolved as <code>./</code> and so path would work properly in both modes. </p> <p>With this configuration, calling <code>mkdocsPublish</code> will publish generated mkdocs site with extra <code>javadoc</code> folder inside (you can put relative link to it inside documentation).</p>"},{"location":"guide/publication/#publication-tasks","title":"Publication tasks","text":"<p>Originally, plugin was using git-publish plugin, but it was retired. Currently, git-publish tasks added directly into this plugin (with modifications). To avoid compatibility problems, extra configuration and publication tasks preserved the same:</p> <ul> <li><code>gitPublish</code> configuration for git publication configurations. For most cases, plugin configures it itself.   Still, it may be useful for merging configuration with other files.</li> <li>Tasks:<ul> <li><code>gitPublishReset</code> - checkout repository</li> <li><code>mkdocsVersionsFile</code> - generate versions.json file for version switcher</li> <li><code>gitPublishCopy</code> - copy (and add) files into repository</li> <li><code>gitPublishCommit</code> - commit updates into repository</li> <li><code>gitPublishPush</code> - push commit</li> <li><code>mkdocsPublish</code> - publish to github pages (main task)</li> </ul> </li> </ul> <p>Normally, you just need to call <code>mkdocsPublish</code> to perform publication  and <code>mkdocsVersionsFile</code> could be called directly to verify versions file update correctness. Other tasks could just simplify customizations</p> <p>Tasks dependency chain: <pre><code>mkdocsBuild &lt;- gitPublishReset &lt;- mkdocsVersionsFile &lt;- gitPublishCopy &lt;- gitPublishCommit &lt;- gitPublishPush &lt;- mkdocsPublish\n</code></pre></p> <p><code>gitPublish</code> configuration reference:</p> <pre><code>gitPublish {\n    // Repository directory. For example:  file(\"$buildDir/something\")\n    repoDir = file(mkdocs.publish.repoDir)\n    // Repository to publish into (must exists). For example, 'git@github.com:user/test-repo.git'\n    repoUri = mkdocs.publish.repoUri\n    // (Optional) Where to fetch from prior to fetching from the remote (i.e. a local repo to save time).\n    referenceRepoUri\n    // Target branch (would be created if does not exists).\n    branch = mkdocs.publish.branch \n    // commit message\n    commitMessage = mkdocs.publish.comment\n    // Signing commits. Omit to use the default from your gitconfig.\n    sign = false\n    // Repository user name (for authorization). See \"org.ajoberstar.grgit.auth.username\" property\n    // https://ajoberstar.org/grgit/main/grgit-authentication.html\n    username // could be auto filled from gradle property \"org.ajoberstar.grgit.auth.username\"\n    // Repository password or github token. See \"org.ajoberstar.grgit.auth.password\" property\n    password // could be auto filled from gradle property \"org.ajoberstar.grgit.auth.password\"\n\n    //  Content to add into repository (gradle CopySpec). For example:\n    //  contents {\n    //    from 'src/pages'\n    //    from(javadoc) {\n    //      into 'api'\n    //    }\n    //  }\n    // https://docs.gradle.org/current/dsl/org.gradle.api.tasks.Copy.html\n    contents {\n        from(\"${mkdocs.buildDir}\")\n    }\n\n    // What to keep (or remote) in existing branch. For example:\n    // preserve {\n    //    include '1.0.0/**'\n    //    exclude '1.0.0/temp.txt'\n    // }\n    // https://docs.gradle.org/current/javadoc/org/gradle/api/tasks/util/PatternFilterable.html\n    if (multi_version_publish) {\n        // preserve everything except currently published version (in case of re-publish)\n        preserve {\n            include '**'\n            exclude \"${mkdocs.publish.docPath}/**\"\n        }\n    }\n}\n</code></pre> <p>Publication process:</p> <ol> <li><code>mkdocsBuild</code> build site into  <code>$mkdocs.buildDir/$mkdocs.publish.docPath</code> (by default, <code>build/mkdocs/$version/</code>)<ul> <li>root redirect <code>index.html</code> generated (by default, <code>build/mkdocs/index.html</code>)</li> <li>if required, alias folders would be generated too (by copying generated version content)</li> </ul> </li> <li><code>gitPublishReset</code> clones gh-pages repo (by default, into <code>.gradle/gh-pages</code>) or creates new one<ul> <li>cleanup repo according to <code>gitPublish.preserve</code> (by default, <code>.gradle/gh-pages/$version/</code> folder removed only)</li> </ul> </li> <li><code>mkdocsVersionsFile</code> generates versions.json file based on version folders checked out from gh-pages repository    (file generated in <code>$mkdocs.buildDir</code>)</li> <li><code>gitPublishCopy</code> copies everything according to <code>gitPublish.contents</code> (by default, everything from <code>build/mkdocs</code>)</li> <li><code>gitPublishCommit</code>, <code>gitPublishPush</code> - commit changes and push to gh-pages repository (by default, <code>gh-pages</code> branch in current repo)</li> </ol> <p>You can configure additional folders for publication with <code>contents</code> (as shown above with javadoc)  and cleanup extra directories with <code>preserve</code> configuration. For example:</p> <pre><code>gitPublish {\n    contents {\n        from 'build/custom-dir' {\n            into 'custom-dir'        \n        }\n    }\n\n    preserve {\n        exclude 'custom-dir'\n    }\n}\n</code></pre> <p>Here extra <code>build/custom-dir</code> directory added for publication (into <code>custom-dir</code>) and previous <code>custom-dir</code> folder (already committed) will be removed before publication.</p>"},{"location":"guide/publication/#site_url","title":"site_url","text":"<p><code>site_url</code> configuration defined in mkdocs.yml should point to the site root. It may be github pages or some custom domain. Setting affect home icon link, page metadata and links in generated sitemap.xml.</p> <p>When multi-version publishing used (by default), this url must point to documentation version folder (otherwise links will be incorrect in the sitemap). To avoid manual changes, just configure root site url (e.g. <code>http://myroot.com/</code>) and  plugin will automatically change site_url before <code>mkdocsBuild</code> (for example, to <code>http://myroot.com/1.0/</code>; see build log - it will show updated url).  Config is reverted back after the task, so you will not have to commit or revert changes.</p> <p>If <code>site_url</code> option is not defined at all (or multi-version publishing is not enabled) then config will not be changed.</p> <p>You can disable automatic configuration changes:</p> <pre><code>mkdocs.updateSiteUrl = false\n</code></pre> <p>Note that <code>mkdocsServe</code> is not affected (will generate with the original site_url) because it is not important for documentation writing (you can always call <code>mkdocsBuild</code> and validate urls correctness).</p>"},{"location":"guide/tasks/","title":"Tasks","text":""},{"location":"guide/tasks/#init","title":"Init","text":"<p><code>mkdocsInit</code> task generate initial site version into <code>src/doc</code> (or custom location).</p> <p>Note</p> <p>Plugin does not use mkdocs new command for site generation: custom template used  with pre-configured plugins and enabled material theme.</p> <p>Task will do nothing if target folder exists and not empty. </p>"},{"location":"guide/tasks/#dev-server","title":"Dev server","text":"<p><code>mkdocsServe</code> task start live reload server (used during development) on   http://127.0.0.1:8000/.</p> <p>Warning</p> <p>Python process may not be killed after you stop gradle execution (search and kill python process manually). This is a known gradle problem  and the only known workaround is to start task without daemon: <code>gradlew mkdocsServe --no-daemon</code>.  Another alternative is to start serve command directly: copy console command from task execution log and use it directly.</p> <p>When docker used, container should be properly shut down, but not immediately (about 10s).</p>"},{"location":"guide/tasks/#build","title":"Build","text":"<p><code>mkdocsBuild</code> task will generate (suppose project version is '1.0-SNAPSHOT'):</p> <pre><code>build/mkdocs/\n    /1.0-SNAPSHOT/    - mkdocs site\n    index.html        - redirect to correct site\n</code></pre> <p>Plugin is configured for multi-version documentation publishing: each version is in its own folder and special <code>index.html</code> at the root will redirect to the latest version (when published).</p> <p>Everything in <code>build/mkdocs/</code> is assumed to be published into github pages. </p> <p>Tip</p> <p>As documentation is often updated for already released version, it makes sense to define  current version manually (or define it when you need to publish to exact version):</p> <pre><code>mkdocs.publish.docPath = '1.0'\n</code></pre> <p>For multi-module documentation, <code>mkdocsVersionsFile</code> may be called instead of <code>mkdocsBuild</code> in order to generate versions.json and be able to test version switcher (ofc. it would not be able to actually switch version, but will correctly show all available versions (after publication list would be the same))</p> <p>Note</p> <p><code>mkdocsVersionsFile</code> task if available only if full plugin version used (with git publication task), for <code>mkdocs-build</code> plugin it would not be available. With lightweight plugin, versions.json file could be generated in incremental way from existing one</p>"},{"location":"guide/tasks/#update-old-documentation","title":"Update old documentation","text":"<p>When older documentation version needs to be updated switch off redirection <code>index.html</code> generation (so it would not override redirection to the latest version):</p> <pre><code>mkdocs.publish {\n    docPath = '0.9'  \n    rootRedirect = false  // site root must still redirect to '1.0' (assume it's already published)\n}\n</code></pre> <p>Will build:</p> <pre><code>build/mkdocs/\n    /0.9/    - mkdocs site for old version\n</code></pre>"},{"location":"guide/tasks/#publish","title":"Publish","text":"<p><code>mkdocsPublish</code> calls <code>mkdocsBuild</code> and publish contents of <code>build/mkdocs/</code> into git repo (by default, <code>gh-pages</code> branch in current repo).</p> <p>Also <code>mkdocsVersionsFile</code> task could be called to verify versions.json generation correctness.</p> <p>See publication for more details.</p>"},{"location":"guide/tasks/#custom-mkdocs-task","title":"Custom Mkdocs task","text":"<p>If you need to use custom mkdocs command:</p> <pre><code>task doSomething(type: MkdocsTask) {\n    command = '--help'\n}\n</code></pre> <p>Note</p> <p>Full task package is not required because <code>MkdocsTask</code> is actually a property, registered by plugin with the full class name in value. </p> <p><code>:doSomething</code> task call will do: <code>python -m mkdocs --help</code>.  </p>"},{"location":"guide/theme/","title":"Themes","text":"<p>By default, plugin assumes material theme usage, but you can use any other theme if you want.</p>"},{"location":"guide/theme/#changing-theme","title":"Changing theme","text":"<p>To apply a new theme you'll need:</p> <ul> <li>Add theme package</li> <li>Apply new theme in mkdocs.yml</li> <li>(optional) Remove material-related configurations in mkdocs.yml</li> </ul> <p>For example, lets configure ivory theme.</p> <p>First, we need to declare it's package in build.gradle:</p> <pre><code>python.pip 'mkdocs-ivory:0.4.6'\n</code></pre> <p>Note</p> <p>Additional optional packages may be required for theme (e.g. like for material theme). Just add all required packages:</p> <pre><code>python.pip 'mkdocs-ivory:0.4.6', \n           'some-additional-package:1.0'\n</code></pre> <p>Then changing theme in mkdocs.yml:</p> <pre><code>theme:\n  name: 'ivory'\n</code></pre>"},{"location":"guide/theme/#material-related-configurations","title":"Material-related configurations","text":"<p>Default mkdocs.yml (generated by plugin) contains special configurations  related to material theme, which may be removed (in case of other theme used):</p> <pre><code>theme:\n  name: 'material'\n  palette:\n    - media: \"(prefers-color-scheme: light)\"\n      scheme: default\n      toggle:\n        icon: material/toggle-switch-off-outline\n        name: Switch to dark mode\n    - media: \"(prefers-color-scheme: dark)\"\n      scheme: slate\n      toggle:\n        icon: material/toggle-switch\n        name: Switch to light mode\n  features:\n    - navigation.tracking\n    - navigation.top\n\nextra:\n  #  palette:\n  #    primary: 'indigo'\n  #    accent: 'indigo'\n\n  version:\n    provider: mike\n\n  social:\n    - icon: fontawesome/brands/github\n      link: https://github.com/xvik\n    - icon: fontawesome/brands/twitter\n      link: https://twitter.com/vyarus\n\n# Google Analytics\n#  analytics:\n#    provider: google\n#    property: UA-XXXXXXXX-X\n\nplugins:\n  - search\n  - markdownextradata\n\nmarkdown_extensions:\n  # Python Markdown\n  - abbr\n  - admonition\n  - attr_list\n  - def_list\n  - footnotes\n  - meta\n  - md_in_html\n  - toc:\n      permalink: true\n\n  # Python Markdown Extensions\n  - pymdownx.arithmatex:\n      generic: true\n  - pymdownx.betterem:\n      smart_enable: all\n  - pymdownx.caret\n  - pymdownx.details\n  - pymdownx.emoji:\n      emoji_index: !!python/name:material.extensions.emoji.twemoji\n      emoji_generator: !!python/name:material.extensions.emoji.to_svg\n  - pymdownx.highlight\n  - pymdownx.inlinehilite\n  - pymdownx.keys\n  - pymdownx.mark\n  - pymdownx.smartsymbols\n  - pymdownx.superfences\n  - pymdownx.tabbed:\n      alternate_style: true\n  - pymdownx.tasklist:\n      custom_checkbox: true\n  - pymdownx.tilde\n\nnav:\n  - Home: index.md\n  - Getting started: getting-started.md\n  - User guide:\n      - Configuration: guide/configuration.md\n      - Pip: guide/pip.md\n      - Variables: guide/vars.md\n      - Multi-version: guide/multi-version.md\n      - Publication: guide/publication.md\n      - Tasks: guide/tasks.md\n      - Themes: guide/theme.md\n  - About:\n      - Release notes: about/history.md\n      - Migration notes: about/migration.md\n      - License: about/license.md\n</code></pre> <p>Note</p> <p>I don't know if <code>markdown_extensions</code> would work with your theme.  You can experiment if you need these extra features (see material theme guide for extensions usage examples). </p>"},{"location":"guide/vars/","title":"Variables","text":"<p>You can declare variables as:</p> <pre><code>mkdocs {\n    extras = [\n            'version': \"${-&gt; project.version}\",\n            'something': 'something else'\n    ]\n}\n</code></pre> <p>Warning</p> <p>You'll have to use lazy evaluation syntax for sensitive properties. In the example above actual version (<code>\"${-&gt; project.version}\"</code>) would be resolved only just before mkdocs task execution.</p> <p>As an alternative, you can declare some properties just before task execution: <pre><code>mkdocsBuild.doFirst {\n    extras.prop = ... some value calculation\n}\n</code></pre> But this will apply property only for one task (e.g. mkdocsServe will not see this property)!</p> <p>Variables applied with markdownextradata mkdocs plugin. The plugin is installed, but not activated by default. To use variables it must be enabled:</p> <pre><code>plugins:\n  - search\n  - markdownextradata\n</code></pre> <p>(search plugin is enabled by default when plugins section is not declared and so have to be manually specified)</p> <p>Now you can use variables in markdown files:</p> <pre><code>{{ gradle.version }} and {{ gradle.something }}\n</code></pre> <p>Note</p> <p>Variables will work for all mkdocs tasks (<code>MkdocsTask</code>), including <code>mkdocsServe</code>!</p> <p>Tip</p> <p>All generated variables are also printed in console (for reference).</p>"},{"location":"guide/vars/#keys","title":"Keys","text":"<p>Plugin will automatically replace ' ' and '-' in variable keys into '_'.</p> <p>For example:</p> <pre><code>mkdocs {\n    extras = [\n            'something-else other': 'something else'\n    ]\n}\n</code></pre> <p>Will appear as <code>gradle.something_else_other</code> variable.</p>"},{"location":"guide/vars/#automation-example","title":"Automation example","text":"<p>Variables addition may be scripted. For example, mkdocs plugin's build use this to  store used pip modules versions as vars:</p> <pre><code>afterEvaluate {\n    // iterating over modules declared with python.pip\n    python.modules.each {\n        def mod = it.split(':')\n        // storing module name as-is: plugin will auto correct '-' to '_'\n        mkdocs.extras[mod[0]] = mod[1]\n    }\n}\n</code></pre> <p>And version reference in docs looks like:</p> <pre><code>* [mkdocs: {{ gradle.mkdocs }} ](https://pypi.python.org/pypi/mkdocs)\n* [mkdocs-material: {{ gradle.mkdocs_material }} ](https://pypi.python.org/pypi/mkdocs-material)\n</code></pre> <p><code>afterEvaluate</code> block is not required in this case, but it's usually safer to use it  to avoid \"configuration property not yet ready\" errors.</p>"},{"location":"guide/vars/#show-template-syntax-in-doc","title":"Show template syntax in doc","text":"<p>If you want to prevent replacing variable, for example:</p> <pre><code>{{ not_var }}\n</code></pre> <p>Then simply apply text \"as variable\" :</p> <pre><code>{{ '{{ not_var }}' }}\n</code></pre> <p>or use jinja raw block syntax</p> <pre><code>{% raw %}\n{{ not_var }}\n{% endraw %}\n</code></pre>"},{"location":"guide/vars/#how-it-works","title":"How it works","text":"<p>When variables declared (<code>mkdocs.extras</code>), plugin will generate a special data file before mkdocs task execution:</p> <pre><code>[mkdocs.yml location]/docs/_data/gradle.yml\n</code></pre> <p>Markdownextradata plugin loads all yaml files in <code>_data</code> directory by default and so it would recognize and load gradle-declared properties automatically.</p> <p>After task execution, file is removed (because it located inside sources).</p> <p>You can declare additinoal (not gradle-related) variables directly in mkdocs.yml's <code>extra</code> section or using additinoal <code>_data</code> files: see plugin documentation.</p> <p>Tip</p> <p>To update plugin version (for example, in case of bugs):  <pre><code>python.pip 'mkdocs-markdownextradata-plugin:0.2.5'\n</code></pre></p>"},{"location":"guide/vars/#potential-problem-on-linux","title":"Potential problem on linux","text":"<p>Markdownextradata plugin requires PyYaml 5.1 or above. If you use older version, you may face  the following error:</p> <pre><code> ...\n    File \"/home/travis/.local/lib/python3.6/site-packages/markdownextradata/plugin.py\", line 90, in on_pre_build\n     if filename.suffix in [\".yml\", \".yaml\"]\n AttributeError: module 'yaml' has no attribute 'FullLoader'\n</code></pre> <p>To workaround it either upgrade global PyYaml:</p> <pre><code>pip3 install --ignore-installed pyyaml\n</code></pre> <p>(<code>--ignore-installed</code> required!)</p> <p>Or specify exact pyyaml version for installation inside environment:</p> <pre><code>python.pip 'pyyaml:5.4.1'\n</code></pre> <p>Note</p> <p>PyYaml module not declared by default because it's a system module, installed with python. It may require additional packages for installation (<code>python3-dev</code>) and so it could  cause more problems if it would be updated by default. But, this problem affects only old python versions, and you may never face this.</p>"},{"location":"guide/vars/#travis-ci","title":"Travis ci","text":"<p>Pyyaml problem might be faced on travis: even <code>bionic</code> shipped with python 3.6 brings old pyyaml version.</p> <p>Workaround:</p> <pre><code>language: java\ndist: bionic\naddons:\n  apt:\n    packages:\n      - \"python3\"\n      - \"python3-pip\"\n      - \"python3-setuptools\"\n\nmatrix:\n  include:\n    - jdk: openjdk8\n    - jdk: openjdk11\n\nbefore_install:\n  - chmod +x gradlew\n  - pip3 install --upgrade pip\n  # markdownextradata plugin requires at least pyyaml 5.1\n  - pip3 install --ignore-installed pyyaml\n</code></pre>"}]}